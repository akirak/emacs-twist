* Twist Nix Library
[[https://github.com/emacs-twist/twist.nix/actions/workflows/test.yml][https://github.com/emacs-twist/twist.nix/actions/workflows/test.yml/badge.svg]]

Twist.nix is a Nix library for building Emacs configurations with packages.
It is an infrastructure for configuration (solely with this library) and package development (with [[https://github.com/emacs-twist/nomake][nomake]]).

This repository is an integral component of [[https://github.com/emacs-twist][emacs-twist]] project.
The goal of the project is to provide an alternative Emacs ecosystem that uses Nix.
It is experimental, but also aims to be useful.

There are several other components under development.
See the following table for comparison with corresponding options:

| Twist component       | Description           | Correspond to           |
|-----------------------+-----------------------+-------------------------|
| twist.nix (this repo) | Build machinery       | [[https://github.com/melpa/package-build/][package-build]]           |
| [[https://github.com/emacs-twist/twist.el][twist.el]]              | Emacs package manager | [[https://github.com/raxod502/straight.el][straight.el]], [[https://github.com/emacscollective/borg][borg]], etc. |
| [[https://github.com/emacs-twist/nomake][nomake]]                | Package development   | [[https://github.com/cask/cask][cask]]                    |

As a Nix library, Twist.nix is also an alternative to [[https://nixos.org/manual/nixos/stable/index.html#module-services-emacs][the Emacs wrapper]] (i.e. =emacsWithPackages=) on NixOS.
Twist.nix depends on Nix utility libraries, but it does not depend on the wrapper.

The biggest difference betweeen twist and the wrapper is that twist is capable of building packages from upstream source repositories.
On the contrary, the wrapper fetches pre-built package archives from for most ELPA and MELPA packages, which means it indirectly depends on package-build for MELPA packages.

Here building a package means mapping files into a flat directory, which takes little time.
By being smarter in building packages from sources, twist has an advantage in working around existing packages and adding custom packages, like straight.el.
It also allows usage for package development, which is what package-build does to cask.

With twist, it is easier to lock and update individual packages, because it tracks package versions in flake.lock.
Twist.el, the package management frontend for Twist, should hopefully provide an experience on par with straight.el.

Twist can discover and build packages from the following sources:

- [[https://melpa.org/][MELPA]] recipes (Git)
- ELPA external/core packages (Git)
- ELPA archive tarballs
- [[https://github.com/emacsmirror/][EmacsMirror]] (Git)

To add custom packages to your configuration, you only have to define MELPA recipes and commit them to your repository.
It can already build configurations with a few hundreds of packages from various registries (see [[https://github.com/emacs-twist/examples][examples]]).
** Documentation
The user manual is currently a work in progress.
** Credits
Twist is a Nix re-implementation of [[https://github.com/melpa/package-build][package-build]] and replicates its build logic.
It is also heavily influenced by the Emacs wrapper in [[https://github.com/NixOS/nixpkgs/][nixpkgs]], though twist was written from scratch and different in implementation.
