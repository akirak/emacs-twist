name: Test

on:
  push:

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      pkgs: ${{ steps.changes.outputs.pkgs }}
      lib: ${{ steps.changes.outputs.lib }}
      test: ${{ steps.changes.outputs.test }}
    steps:
    - uses: actions/checkout@v2.4.0
    - uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          pkgs:
            - 'pkgs/**'
          lib:
            - 'pkgs/build-support/**'
          test:
            - 'test/**'
            - '.github/workflows/test.yml'

  unit-tests:
    needs: changes
    if: ${{ needs.changes.outputs.lib == 'true' }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2.4.0
    - uses: cachix/install-nix-action@v16
      with:
        nix_path: nixpkgs=channel:nixos-unstable

    - name: Run unit tests
      run: |
        set -euo pipefail
        nix-instantiate --strict --eval --json pkgs/build-support/**/test*.nix \
        | jq

  smoke-tests:
    needs: changes
    if: ${{ needs.changes.outputs.pkgs == 'true' || needs.changes.outputs.test == 'true' }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2.4.0
    - uses: cachix/install-nix-action@v16

    - uses: cachix/cachix-action@v10
      with:
        name: akirak
        signingKey: '${{ secrets.CACHIX_SIGNING_KEY }}'
        extraPullNames: emacs-ci
        skipPush: true

    - name: Use the local repository as the input
      run: nix flake lock --override-input twist $PWD/..
      working-directory: test

    - name: Check the precondition
      working-directory: test
      run: |
        make clean
        [[ ! -f lock/flake.nix ]]
        [[ ! -f lock/flake.lock ]]
        [[ ! -f lock/archive.lock ]]

    - name: Build the configuration without a lock file (which should fail)
      id: no-lock
      working-directory: test
      run: nix build --dry-run
      continue-on-error: true

    - name: Pure evaluation without the lock file must fail
      if: ${{ steps.no-lock.outcome == 'success' }}
      run: exit 1

    - name: Lock the ELPA packages
      working-directory: test
      run: nix run .#update-elpa --impure

    - name: Generate the lock file for MELPA packages
      working-directory: test
      run: nix run .#lock --impure

    - name: The lock file exists
      working-directory: test
      run: |
        [[ -s lock/archive.lock ]]
        [[ -s lock/flake.nix ]]
        [[ -s lock/flake.lock ]]

    - name: Build the configuration with the generated lock file
      working-directory: test
      run: nix build --dry-run

    - name: Get the system
      id: system
      run: |
        system=$(nix eval --impure --expr builtins.currentSystem)
        echo "::set-output name=emacs::packages.$system.emacs"

    - run: |
        nix eval --json .#${{ steps.system.outputs.emacs }}.initFiles \
        | jq
      working-directory: test

    - run: |
        nix eval --json .#${{ steps.system.outputs.emacs }}.packageInputs \
        | jq
      working-directory: test

    - run: |
        nix eval --json .#${{ steps.system.outputs.emacs }}.elispPackages.magit \
        | jq
      working-directory: test
